/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/d8a8cae2-b3db-48f8-8ab0-a0ec05c40c23 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudLight lED;
  int speed;
  int steer;
  bool forwardLeft;
  bool reverseLeft;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#define BIT(a) (1 << (a))
#define SIGN(a) ((a) >= 0.0? 1.0: -1.0)
int ledPin = 2; 

//Pins used for L & R motor direction
int in1 = 27; //Motor A
int in2 = 26; //Motor A
int in3 = 21; //Motor B
int in4 = 22; //Motor B
int motor1Speed = 13;
int motor2Speed = 32;
int SpeedL = 14;
int SpeedR = 12;
const int trigPin = 5;
const int echoPin = 33;


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  pinMode(ledPin, OUTPUT);
  pinMode(motor1Speed, OUTPUT);
  pinMode(motor2Speed, OUTPUT);
  pinMode(SpeedL, OUTPUT);
  pinMode(SpeedR, OUTPUT);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  
  
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void usonic_transmit() {
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
}

void loop() 
{
  ArduinoCloud.update();
  // Your code here 
  
  // int steer = 0;
  
  SpeedL = map(steer, 0, -50, 255, 0);
  SpeedR = map(steer, 0, 50, 255, 0);

 
  analogWrite(motor1Speed, SpeedL); // Mode 1: Speed Control by Steering
  analogWrite(motor2Speed, SpeedR);
  
  if (lED == HIGH){
    
    analogWrite(motor1Speed, speed); // Mode 2: Direct Speed Control; no steering
    analogWrite(motor2Speed, speed);  
  }
  
  
  delay(1/30);
  
}


  



/*
  Since LED is READ_WRITE variable, onLEDChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLEDChange()  // Add your code here to act upon LED change
{
  if (lED == HIGH)
  {
  Serial.println("LED ON");
  digitalWrite(ledPin, HIGH);
  
  }
  else 
  {
    
  Serial.println("LED OFF");
  digitalWrite(ledPin, LOW);
  
  }
}

void onLbuttonChange()  {
  
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  Serial.println("onForwardL");
  
  digitalWrite(in3, HIGH); 
  digitalWrite(in4, LOW);
  Serial.println("onForwardL2");
  
  // Add your code here to act upon Lbutton change
}


void onRbuttonChange()  {
  
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  Serial.println("onReverseL");
  
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
  Serial.println("onReverseL2");
  
  // Add your code here to act upon Rbutton change
}




/*
  Since ForwardLeft is READ_WRITE variable, onForwardLeftChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onForwardLeftChange()  {
  
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  Serial.println("onForwardL");
  
  digitalWrite(in3, HIGH); 
  digitalWrite(in4, LOW);
  Serial.println("onForwardL2");
  
}

/*
  Since ReverseLeft is READ_WRITE variable, onReverseLeftChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onReverseLeftChange()  {
  // Add your code here to act upon ReverseLeft change
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  Serial.println("onReverseL");
  
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
  Serial.println("onReverseL2");
  
}
